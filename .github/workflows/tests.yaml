name: tests
on:
  push:
    branches:
      - "main"
      - "feature/*"
      - "hotfix/*"
      - "release/*"
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Configure environment
        run: |
          echo "::group::Begin snap install"
          echo "Installing snaps in the background while running apt and pip..."
          sudo snap install --no-wait --classic pyright
          sudo snap install --no-wait shellcheck
          echo "::endgroup::"
          echo "::group::pip install"
          python -m pip install tox
          echo "::endgroup::"
          echo "::group::Create virtual environments for linting processes."
          tox run -m lint --notest
          echo "::endgroup::"
          echo "::group::Wait for snap to complete"
          snap watch --last=install
          echo "::endgroup::"
      - name: Run Linters
        run: tox run --skip-pkg-install --no-list-dependencies -m lint

  unit:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12-dev
          cache: 'pip'
      - name: Configure environment
        run: |
          echo "::group::pip install"
          python -m pip install tox
          echo "::endgroup::"
          mkdir -p results
      - name: Setup Tox environments
        run: tox run -m tests --notest
      - name: Test with tox
        run: tox run --skip-pkg-install --no-list-dependencies --result-json results/tox.json -m unit-tests
        env:
          PYTEST_ADDOPTS: "--no-header -vv -rN"
      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          directory: ./results/
          files: coverage*.xml
          verbose: true
      - name: Upload test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-unit
          path: results/

  integration:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12-dev
          cache: 'pip'
      - name: Configure environment
        run: |
          echo "::group::pip install"
          python -m pip install tox
          echo "::endgroup::"
          mkdir -p results
      - name: Setup Tox environments
        run: tox run -m tests --notest
      - name: Test with tox
        run: tox run --skip-pkg-install --no-list-dependencies --result-json results/tox.json -m integration-tests
        env:
          PYTEST_ADDOPTS: "--no-header -vv -rN"
      - name: Upload test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: results/

  tics-report:
    runs-on: ubuntu-latest
    needs: [lint, unit, integration]
    if: ${{ github.event_name == 'push' || github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download integration coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results-integration
          path: results/integration/

      - name: Download unit coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results-unit
          path: results/unit/

      - name: TICS analysis and report
        run: |
          export TICSAUTHTOKEN=${{ secrets.TICSAUTHTOKEN }}

          set -x
          # Install the TICS and staticcheck
          curl --silent --show-error "https://canonical.tiobe.com/tiobeweb/TICS/api/public/v1/fapi/installtics/Script?cfg=default&platform=linux&url=https://canonical.tiobe.com/tiobeweb/TICS/" > install_tics.sh
          . ./install_tics.sh
          TICSQServer -project imagecraft -tmpdir /tmp/tics -branchdir .

      - name: Upload TICS report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tics-report
          path: /tmp/tics/ticstmpdir
          retention-days: 7
